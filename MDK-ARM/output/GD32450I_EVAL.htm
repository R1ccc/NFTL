<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\GD32450I_EVAL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\GD32450I_EVAL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Jul 22 16:45:43 2024
<BR><P>
<H3>Maximum Stack Usage =        272 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; test_case1 &rArr; nandflash_page_program &rArr; update_L2PBST_to_nand &rArr; spi_nandflash_write_data &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from gd32f4xx_it.o(i.BusFault_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1e]">CAN0_RX0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1f]">CAN0_RX1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1d]">CAN0_TX_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4c]">CAN1_EWMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4a]">CAN1_RX0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4b]">CAN1_RX1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[49]">CAN1_TX_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[58]">DCI_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[39]">DMA0_Channel7_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[42]">DMA1_Channel0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[43]">DMA1_Channel1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[44]">DMA1_Channel2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[45]">DMA1_Channel3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[46]">DMA1_Channel4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4e]">DMA1_Channel5_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4f]">DMA1_Channel6_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[50]">DMA1_Channel7_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from gd32f4xx_it.o(i.DebugMon_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[47]">ENET_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[48]">ENET_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3a]">EXMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[32]">EXTI10_15_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[21]">EXTI5_9_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32f4xx_it.o(i.HardFault_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2a]">I2C0_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[29]">I2C0_EV_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[53]">I2C2_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[52]">I2C2_EV_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[62]">IPA_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from gd32f4xx_it.o(i.MemManage_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32f4xx_it.o(i.NMI_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from gd32f4xx_it.o(i.PendSV_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[f]">RCU_CTC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5d]">SPI3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5e]">SPI4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5f]">SPI5_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from gd32f4xx_it.o(i.SVC_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from gd32f4xx_it.o(i.SysTick_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[64]">SystemInit</a> from system_gd32f4xx.o(i.SystemInit) referenced from startup_gd32f450.o(.text)
 <LI><a href="#[c]">TAMPER_STAMP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[22]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[25]">TIMER0_Channel_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[24]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[23]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3c]">TIMER4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[40]">TIMER5_DAC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[41]">TIMER6_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[35]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[38]">TIMER7_Channel_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[37]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[36]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[61]">TLI_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[60]">TLI_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[59]">TRNG_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3e]">UART3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5b]">UART6_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5c]">UART7_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2f]">USART0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[51]">USART5_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4d]">USBFS_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[34]">USBFS_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[55]">USBHS_EP1_In_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[54]">USBHS_EP1_Out_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[57]">USBHS_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[56]">USBHS_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from gd32f4xx_it.o(i.UsageFault_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[65]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f450.o(.text)
 <LI><a href="#[66]">fputc</a> from main.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[63]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[65]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[67]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[c6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[c7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[c8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TLI_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TLI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USBHS_EP1_In_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USBHS_EP1_Out_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USBHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USBHS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_L2PBST_to_nand
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ABT_to_nand
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_L2PBST_from_nand
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_DBTRBT_from_nand
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ABT_from_nand
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_DBTRBT_to_nand
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_min_erase_block
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_unmapped_block
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_L2PBST_to_nand
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ABT_to_nand
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_DBTRBT_to_nand
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_DBTRBTABTPST_block_addr
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[bc]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_data
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[68]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ce]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[cf]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[d0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SystemInit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_200m_25m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d1]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[76]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_check
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_DBTRBTABTPST_block_addr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_block_erase
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_case1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[d4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[94]"></a>delay_1ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(i.delay_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>delay_decrement</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick.o(i.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[77]"></a>env_check</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gd5f1gxx.o(i.env_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = env_check &rArr; nandflash_block_erase &rArr; update_L2PBST_to_nand &rArr; spi_nandflash_write_data &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_page_data
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_DBTRBT_from_nand
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_DBTRBT_to_nand
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_block_erase
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_init
</UL>

<P><STRONG><a name="[66]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[7e]"></a>gd_eval_com_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gd32f450i_eval.o(i.gd_eval_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = gd_eval_com_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>gd_eval_led_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gd32f450i_eval.o(i.gd_eval_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gd_eval_led_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_status_led_init
</UL>

<P><STRONG><a name="[bf]"></a>gd_eval_led_off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f450i_eval.o(i.gd_eval_led_off))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_status_led_init
</UL>

<P><STRONG><a name="[80]"></a>gpio_af_set</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, gd32f4xx_gpio.o(i.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi5_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[b0]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_set_register
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_cache
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_program_load
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_program_execute
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_page_read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_get_feature
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_block_erase
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_id
</UL>

<P><STRONG><a name="[aa]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_set_register
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_cache
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_program_load
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_program_execute
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_page_read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_get_feature
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_block_erase
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi5_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_id
</UL>

<P><STRONG><a name="[81]"></a>gpio_mode_set</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, gd32f4xx_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi5_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[82]"></a>gpio_output_options_set</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gd32f4xx_gpio.o(i.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi5_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[63]"></a>main</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = main &rArr; test_case1 &rArr; nandflash_page_program &rArr; update_L2PBST_to_nand &rArr; spi_nandflash_write_data &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_id
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_status_led_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_case1
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[79]"></a>nandflash_block_erase</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, gd5f1gxx.o(i.nandflash_block_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = nandflash_block_erase &rArr; update_L2PBST_to_nand &rArr; spi_nandflash_write_data &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_block_erase
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_L2PBST_to_nand
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_DBTRBT_array
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ABT_to_nand
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_mapping_RBT
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_replace_block_from_ram
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_whether_in_DBT_array
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_DBTRBT_to_nand
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_check
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_case1
</UL>

<P><STRONG><a name="[a0]"></a>nandflash_page_program</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, gd5f1gxx.o(i.nandflash_page_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nandflash_page_program &rArr; update_L2PBST_to_nand &rArr; spi_nandflash_write_data &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_data
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_L2PBST_to_nand
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_DBTRBT_array
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ABT_to_nand
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mapped_physical_block
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_proper_block
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_mapping_RBT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_page_data
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_replace_block_from_ram
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mapped_physical_block
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_BST
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_whether_in_DBT_array
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_average
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_DBTRBT_to_nand
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_case1
</UL>

<P><STRONG><a name="[b7]"></a>qspi_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.qspi_disable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_cache
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_program_load
</UL>

<P><STRONG><a name="[c0]"></a>rcu_clock_freq_get</STRONG> (Thumb, 200 bytes, Stack size 52 bytes, gd32f4xx_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[7f]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi5_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[c2]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[c1]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[a8]"></a>select_unmapped_block</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, gd5f1gxx.o(i.select_unmapped_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = select_unmapped_block &rArr; check_whether_in_DBT_array
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_whether_in_DBT_array
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_case1
</UL>

<P><STRONG><a name="[a9]"></a>spi5_init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, gd5f1gxx.o(i.spi5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi5_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_init
</UL>

<P><STRONG><a name="[ac]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi5_init
</UL>

<P><STRONG><a name="[bb]"></a>spi_i2s_data_receive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_send_byte
</UL>

<P><STRONG><a name="[ba]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_send_byte
</UL>

<P><STRONG><a name="[b9]"></a>spi_i2s_flag_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_send_byte
</UL>

<P><STRONG><a name="[ab]"></a>spi_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi5_init
</UL>

<P><STRONG><a name="[9a]"></a>spi_nandflash_block_erase</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gd5f1gxx.o(i.spi_nandflash_block_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_nandflash_block_erase &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_enable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_send_byte
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_get_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_L2PBST_to_nand
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ABT_to_nand
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rebuild_DBTRBT_array
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_DBTRBT_to_nand
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_block_erase
</UL>

<P><STRONG><a name="[ad]"></a>spi_nandflash_get_feature</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gd5f1gxx.o(i.spi_nandflash_get_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_data
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_get_status_flag
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_block_erase
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_badblock_detect
</UL>

<P><STRONG><a name="[b2]"></a>spi_nandflash_get_status_flag</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gd5f1gxx.o(i.spi_nandflash_get_status_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_get_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_set_register
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_reset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_data
</UL>

<P><STRONG><a name="[96]"></a>spi_nandflash_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gd5f1gxx.o(i.spi_nandflash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = spi_nandflash_init &rArr; rebuild_DBTRBT_array &rArr; update_L2PBST_to_nand &rArr; spi_nandflash_write_data &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_set_register
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_reset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_block_erase
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi5_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_check
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rebuild_DBTRBT_array
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>spi_nandflash_page_read</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gd5f1gxx.o(i.spi_nandflash_page_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_nandflash_page_read &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_data
</UL>

<P><STRONG><a name="[b5]"></a>spi_nandflash_program_execute</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gd5f1gxx.o(i.spi_nandflash_program_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi_nandflash_program_execute &rArr; spi_nandflash_write_enable &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_enable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_data
</UL>

<P><STRONG><a name="[b6]"></a>spi_nandflash_program_load</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gd5f1gxx.o(i.spi_nandflash_program_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi_nandflash_program_load &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_disable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_data
</UL>

<P><STRONG><a name="[b8]"></a>spi_nandflash_read_cache</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, gd5f1gxx.o(i.spi_nandflash_read_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi_nandflash_read_cache &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_disable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_data
</UL>

<P><STRONG><a name="[8f]"></a>spi_nandflash_read_data</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gd5f1gxx.o(i.spi_nandflash_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_cache
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_page_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_get_status_flag
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_get_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_spare
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_page_data
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_L2PBST_from_nand
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_DBTRBT_from_nand
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ABT_from_nand
</UL>

<P><STRONG><a name="[97]"></a>spi_nandflash_read_id</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gd5f1gxx.o(i.spi_nandflash_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_nandflash_read_id &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>spi_nandflash_read_spare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd5f1gxx.o(i.spi_nandflash_read_spare))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spi_nandflash_read_spare &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_badblock_detect
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rebuild_DBTRBT_array
</UL>

<P><STRONG><a name="[b3]"></a>spi_nandflash_reset</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gd5f1gxx.o(i.spi_nandflash_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_nandflash_reset &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_send_byte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_get_status_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_init
</UL>

<P><STRONG><a name="[b1]"></a>spi_nandflash_send_byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gd5f1gxx.o(i.spi_nandflash_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_set_register
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_cache
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_program_load
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_program_execute
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_page_read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_get_feature
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_block_erase
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_id
</UL>

<P><STRONG><a name="[ae]"></a>spi_nandflash_set_register</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gd5f1gxx.o(i.spi_nandflash_set_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spi_nandflash_set_register &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_send_byte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_get_status_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_badblock_detect
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_init
</UL>

<P><STRONG><a name="[99]"></a>spi_nandflash_write_data</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, gd5f1gxx.o(i.spi_nandflash_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = spi_nandflash_write_data &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_data
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_program_load
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_program_execute
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_get_feature
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_L2PBST_to_nand
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ABT_to_nand
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_page_data
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_DBTRBT_to_nand
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
</UL>

<P><STRONG><a name="[af]"></a>spi_nandflash_write_enable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gd5f1gxx.o(i.spi_nandflash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_nandflash_write_enable &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_program_execute
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_block_erase
</UL>

<P><STRONG><a name="[93]"></a>systick_config</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, systick.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_config
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>test_case1</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, main.o(i.test_case1))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = test_case1 &rArr; nandflash_page_program &rArr; update_L2PBST_to_nand &rArr; spi_nandflash_write_data &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_DBTRBT_to_nand
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_unmapped_block
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_block_erase
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>test_status_led_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.test_status_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = test_status_led_init &rArr; gd_eval_led_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_off
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>update_DBTRBT_to_nand</STRONG> (Thumb, 680 bytes, Stack size 40 bytes, gd5f1gxx.o(i.update_DBTRBT_to_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = update_DBTRBT_to_nand &rArr; spi_nandflash_write_data &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_block_erase
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_check
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rebuild_DBTRBT_array
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_block_erase
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_case1
</UL>

<P><STRONG><a name="[84]"></a>usart_baudrate_set</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, gd32f4xx_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[7c]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[83]"></a>usart_deinit</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[87]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[7d]"></a>usart_flag_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[85]"></a>usart_receive_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[86]"></a>usart_transmit_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[be]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[8d]"></a>add_bad_Block_to_DBTRBT_ram</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gd5f1gxx.o(i.add_bad_Block_to_DBTRBT_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_bad_Block_to_DBTRBT_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_DBTRBT_array
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_build_DBTRBTABTPST
</UL>

<P><STRONG><a name="[74]"></a>alloc_DBTRBTABTPST_block_addr</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, gd5f1gxx.o(i.alloc_DBTRBTABTPST_block_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = alloc_DBTRBTABTPST_block_addr &rArr; spi_nandflash_badblock_detect &rArr; spi_nandflash_read_spare &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_badblock_detect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rebuild_DBTRBT_array
</UL>

<P><STRONG><a name="[a2]"></a>calculate_average</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd5f1gxx.o(i.calculate_average))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calculate_average
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_proper_block
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
</UL>

<P><STRONG><a name="[8b]"></a>check_whether_in_DBT_array</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, gd5f1gxx.o(i.check_whether_in_DBT_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_whether_in_DBT_array
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_DBTRBT_array
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_min_erase_block
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_unmapped_block
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_block_erase
</UL>

<P><STRONG><a name="[a5]"></a>compress_BST</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, gd5f1gxx.o(i.compress_BST))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = compress_BST
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
</UL>

<P><STRONG><a name="[92]"></a>decompress_BST</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gd5f1gxx.o(i.decompress_BST))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decompress_BST
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_L2PBST_from_nand
</UL>

<P><STRONG><a name="[a1]"></a>get_mapped_physical_block</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd5f1gxx.o(i.get_mapped_physical_block))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
</UL>

<P><STRONG><a name="[89]"></a>get_min_erase_block</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, gd5f1gxx.o(i.get_min_erase_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = get_min_erase_block &rArr; check_whether_in_DBT_array
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_whether_in_DBT_array
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_proper_block
</UL>

<P><STRONG><a name="[9b]"></a>get_replace_block_from_ram</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd5f1gxx.o(i.get_replace_block_from_ram))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_block_erase
</UL>

<P><STRONG><a name="[8c]"></a>init_build_DBTRBTABTPST</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gd5f1gxx.o(i.init_build_DBTRBTABTPST))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = init_build_DBTRBTABTPST &rArr; spi_nandflash_badblock_detect &rArr; spi_nandflash_read_spare &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_badblock_detect
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_bad_Block_to_DBTRBT_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rebuild_DBTRBT_array
</UL>

<P><STRONG><a name="[8e]"></a>load_ABT_from_nand</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gd5f1gxx.o(i.load_ABT_from_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = load_ABT_from_nand &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_data
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rebuild_DBTRBT_array
</UL>

<P><STRONG><a name="[78]"></a>load_DBTRBT_from_nand</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, gd5f1gxx.o(i.load_DBTRBT_from_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = load_DBTRBT_from_nand &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_data
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_check
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rebuild_DBTRBT_array
</UL>

<P><STRONG><a name="[91]"></a>load_L2PBST_from_nand</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gd5f1gxx.o(i.load_L2PBST_from_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = load_L2PBST_from_nand &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_BST
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rebuild_DBTRBT_array
</UL>

<P><STRONG><a name="[7a]"></a>move_page_data</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gd5f1gxx.o(i.move_page_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = move_page_data &rArr; spi_nandflash_write_data &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_data
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_check
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
</UL>

<P><STRONG><a name="[9d]"></a>re_mapping_RBT</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gd5f1gxx.o(i.re_mapping_RBT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = re_mapping_RBT
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_block_erase
</UL>

<P><STRONG><a name="[a6]"></a>rebuild_DBTRBT_array</STRONG> (Thumb, 1258 bytes, Stack size 56 bytes, gd5f1gxx.o(i.rebuild_DBTRBT_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rebuild_DBTRBT_array &rArr; update_L2PBST_to_nand &rArr; spi_nandflash_write_data &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_spare
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_block_erase
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_L2PBST_to_nand
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ABT_to_nand
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_L2PBST_from_nand
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_DBTRBT_from_nand
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ABT_from_nand
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_build_DBTRBTABTPST
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_DBTRBTABTPST_block_addr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_DBTRBT_to_nand
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_init
</UL>

<P><STRONG><a name="[a3]"></a>select_proper_block</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd5f1gxx.o(i.select_proper_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = select_proper_block &rArr; get_min_erase_block &rArr; check_whether_in_DBT_array
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_min_erase_block
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_average
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
</UL>

<P><STRONG><a name="[a4]"></a>set_mapped_physical_block</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd5f1gxx.o(i.set_mapped_physical_block))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
</UL>

<P><STRONG><a name="[75]"></a>spi_nandflash_badblock_detect</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gd5f1gxx.o(i.spi_nandflash_badblock_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = spi_nandflash_badblock_detect &rArr; spi_nandflash_read_spare &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_set_register
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_read_spare
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_get_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_build_DBTRBTABTPST
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_DBTRBTABTPST_block_addr
</UL>

<P><STRONG><a name="[9e]"></a>update_ABT_to_nand</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, gd5f1gxx.o(i.update_ABT_to_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = update_ABT_to_nand &rArr; spi_nandflash_write_data &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_block_erase
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rebuild_DBTRBT_array
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_block_erase
</UL>

<P><STRONG><a name="[9c]"></a>update_DBTRBT_array</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gd5f1gxx.o(i.update_DBTRBT_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = update_DBTRBT_array &rArr; check_whether_in_DBT_array
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_whether_in_DBT_array
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_bad_Block_to_DBTRBT_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_block_erase
</UL>

<P><STRONG><a name="[9f]"></a>update_L2PBST_to_nand</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, gd5f1gxx.o(i.update_L2PBST_to_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = update_L2PBST_to_nand &rArr; spi_nandflash_write_data &rArr; spi_nandflash_read_data &rArr; spi_nandflash_get_status_flag &rArr; spi_nandflash_get_feature &rArr; spi_nandflash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_write_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nandflash_block_erase
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rebuild_DBTRBT_array
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_page_program
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nandflash_block_erase
</UL>

<P><STRONG><a name="[bd]"></a>system_clock_200m_25m_hxtal</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.system_clock_200m_25m_hxtal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_200m_25m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[71]"></a>system_clock_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_gd32f4xx.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config &rArr; system_clock_200m_25m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_200m_25m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[73]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
